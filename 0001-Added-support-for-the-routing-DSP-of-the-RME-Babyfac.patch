[PATCH] Added support for the routing-DSP of the RME Babyface Pro FS.

Added support for the routing matrix in the device.

Signed-off-by: Thomas Ebeling <penguins@bollie.de>

---
 sound/usb/mixer_quirks.c | 155 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 155 insertions(+)

diff --git a/sound/usb/mixer_quirks.c b/sound/usb/mixer_quirks.c
index 02b036b2aefb..67b72b736894 100644
--- a/sound/usb/mixer_quirks.c
+++ b/sound/usb/mixer_quirks.c
@@ -2181,6 +2181,158 @@ static int snd_rme_controls_create(struct usb_mixer_interface *mixer)
 	return 0;
 }
 
+static int snd_rme_bbfpro_update(struct usb_mixer_interface *mixer,
+					u32 value, u16 index)
+{
+	struct snd_usb_audio *chip = mixer->chip;
+	int err;
+	u16 idx, val;
+
+	idx = index | (value & 0x3)<<14;
+	val = (value>>2) & 0xffff;
+
+	err = snd_usb_lock_shutdown(chip);
+	if (err < 0)
+		return err;
+
+	err = snd_usb_ctl_msg(chip->dev,
+			usb_sndctrlpipe(chip->dev, 0), 0x12,
+			USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_DEVICE,
+			val, idx, 0, 0);
+
+	snd_usb_unlock_shutdown(chip);
+	return err;
+}
+
+static int snd_rme_bbfpro_get(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	ucontrol->value.integer.value[0] = kcontrol->private_value >> 9;
+	return 0;
+}
+
+static int snd_rme_bbfpro_info(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_info *uinfo)
+{
+	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
+	uinfo->count = 1;
+	uinfo->value.integer.min = 0;
+	uinfo->value.integer.max = 46341;
+	return 0;
+}
+
+static int snd_rme_bbfpro_resume(struct usb_mixer_elem_list *list)
+{
+	int priv_value = list->kctl->private_value;
+
+	return snd_rme_bbfpro_update(list->mixer, priv_value >> 9,
+					priv_value & 0x1ff);
+}
+
+static int snd_rme_bbfpro_put(struct snd_kcontrol *kcontrol,
+				struct snd_ctl_elem_value *ucontrol)
+{
+	int err;
+
+	struct usb_mixer_elem_list *list = snd_kcontrol_chip(kcontrol);
+	struct usb_mixer_interface *mixer = list->mixer;
+	u16 index = kcontrol->private_value & 0x1ff;
+	u32 value = ucontrol->value.integer.value[0];
+	u32 old_value = kcontrol->private_value >> 9;
+
+	if (value > 46341)
+		return -EINVAL;
+
+	if (value == old_value)
+		return 0;
+
+	kcontrol->private_value = (value & 0x3ffff)<<9 | index;
+	err = snd_rme_bbfpro_update(mixer, value, index);
+	return err < 0 ? err : 1;
+}
+
+/* name and private_value are set dynamically */
+static const struct snd_kcontrol_new snd_rme_bbfpro_control = {
+	.iface = SNDRV_CTL_ELEM_IFACE_MIXER,
+	.access = SNDRV_CTL_ELEM_ACCESS_READWRITE,
+	.index = 0,
+	.info = snd_rme_bbfpro_info,
+	.get = snd_rme_bbfpro_get,
+	.put = snd_rme_bbfpro_put
+};
+
+static int snd_rme_bbfpro_controls_create(struct usb_mixer_interface *mixer)
+{
+	int err, i, o;
+	char name[48];
+
+	static const char * const input[] = {
+		"AN1",
+		"AN2",
+		"Instr. 1",
+		"Instr. 2",
+		"AS1",
+		"AS2",
+		"ADAT3",
+		"ADAT4",
+		"ADAT5",
+		"ADAT6",
+		"ADAT7",
+		"ADAT8"
+	};
+
+	static const char * const output[] = {
+		"AN1",
+		"AN2",
+		"PH3",
+		"PH4",
+		"AS1",
+		"AS2",
+		"ADAT3",
+		"ADAT4",
+		"ADAT5",
+		"ADAT6",
+		"ADAT7",
+		"ADAT8"
+	};
+
+	for (o = 0 ; o < 12 ; ++o) {
+		for (i = 0 ; i < 12 ; ++i) {
+			// Line routing
+			struct snd_kcontrol_new knew = snd_rme_bbfpro_control;
+			snprintf(name, sizeof(name),
+				"Line-%s-%s Playback Volume",
+				input[i],
+				output[o]);
+
+			knew.name = name;
+			knew.private_value = 26 * o + i;
+			err = add_single_ctl_with_resume(mixer, 0,
+				snd_rme_bbfpro_resume,
+				&knew, NULL);
+			if (err < 0)
+				return err;
+
+			// PCM routing
+			knew = snd_rme_bbfpro_control;
+			snprintf(name, sizeof(name),
+				"PCM-%s-%s Playback Volume",
+				input[i],
+				output[o]);
+
+			knew.name = name;
+			knew.private_value = 26 * o + 12 + i;
+			err = add_single_ctl_with_resume(mixer, 0,
+				snd_rme_bbfpro_resume,
+				&knew, NULL);
+
+			if (err < 0)
+				return err;
+		}
+	}
+	return 0;
+}
+
 int snd_usb_mixer_apply_create_quirk(struct usb_mixer_interface *mixer)
 {
 	int err = 0;
@@ -2282,6 +2434,9 @@ int snd_usb_mixer_apply_create_quirk(struct usb_mixer_interface *mixer)
 	case USB_ID(0x0194f, 0x010c): /* Presonus Studio 1810c */
 		err = snd_sc1810_init_mixer(mixer);
 		break;
+	case USB_ID(0x2a39, 0x3fb0): /* RME Babyface Pro FS */
+		err = snd_rme_bbfpro_controls_create(mixer);
+		break;
 	}
 
 	return err;
-- 
2.26.0

